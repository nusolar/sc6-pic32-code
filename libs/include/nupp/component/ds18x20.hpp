/*
 * File:   ds18x20.hpp
 * Author: alex
 *
 * Created on June 24, 2013, 2:30 AM
 */

#ifndef DS18X20_HPP
#define	DS18X20_HPP

#include "nupp/peripheral/onewire.hpp"
#include "nupp/array.hpp"
#include "nu/compiler.h"

namespace nu {
	/**
	 * DS18X20 supports 9, 10, 11, and 12bit resolution.
	 *
	 * Default resolution at powerup is 12bit, corresponding to 0.0625C precision
	 * and a max temperature of 127.9375C, 0x7ff, or 0b11111111111 (12 ones).
	 *
	 * Class DS18X20 returns its temperatures in deciCelcius.
	 */
	template <size_t num_devices>
	struct DS18X20: public OneWire {
		static const typename OneWire::romcode roms[32];
		union scratch {
			uint8_t bytes[9];
			struct PACKED {
				int16_t temperature;
				uint8_t T_H;
				uint8_t T_L;
				uint8_t config;
				uint8_t reserved[3];
				uint8_t crc;
			};
		};
		static_assert(sizeof(scratch) == 9, "nu::DS18X20::scratch packing");

		INLINE DS18X20(Pin _p): OneWire(_p) {}

		INLINE void convert_t() {
			this->tx_byte_with_crc( this->CONVERT_T );
		}

		INLINE void perform_temperature_conversion() {
			this->reset();
			this->skip_rom();
			this->convert_t();
		}

		INLINE void read_temperature(const typename OneWire::romcode &code, scratch &scr) {
			this->reset();
			this->match_rom(code);
			this->read_scratch(&scr, sizeof(scr));
		}

		/** Convert temperature from 1/256th C to 1/10th C */
		static PURE INLINE int16_t convert_temperature(int16_t temp) {
			return (int16_t)(temp*10/16);
		}

		INLINE void update_temperatures(Array<int16_t, num_devices> &values) {
			Array<scratch, num_devices> scratches;
			for (unsigned i=0; i<num_devices; i++) {
				this->read_temperature(this->roms[i], scratches[i]);
				// DS18X20 uses repeated sign bits, so we zero them out.
				values[i] = convert_temperature((int16_t)(scratches[i].temperature|0x87ff));
			}
		}
	};

	template <size_t num_devices>
	const typename OneWire::romcode DS18X20<num_devices>::roms[32] = {
		// bar 1
		{{0x28, 0x9E, 0x63, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x63, 0x58, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xB4, 0x6B, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x77, 0x55, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x73, 0x58, 0xEA, 0x02, 0x00, 0x00}},
		// bar 2
		{{0x28, 0xF3, 0x5F, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xCF, 0x6C, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xAF, 0x67, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x50, 0x74, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xB9, 0x56, 0xEA, 0x02, 0x00, 0x00}},
		// bar 3
		{{0x28, 0x27, 0x61, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x0E, 0x6E, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xE9, 0x2F, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x2E, 0x5B, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x82, 0x5B, 0xEA, 0x02, 0x00, 0x00}},
		// bar 4
		{{0x28, 0xED, 0x65, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x77, 0x6C, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xC3, 0x5A, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x9D, 0x6D, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x1C, 0x3E, 0xEA, 0x02, 0x00, 0x00}},
		// bar 5
		{{0x28, 0x4E, 0x66, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x76, 0x6D, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xF6, 0x73, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xDE, 0x6C, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0x5C, 0x6B, 0xEA, 0x02, 0x00, 0x00}},

		// bar 5.1
		{{0x28, 0x31, 0x62, 0xEA, 0x02, 0x00, 0x00}},
		{{0x28, 0xD0, 0x6B, 0xEA, 0x02, 0x00, 0x00}}
	};
}

#endif	/* DS18X20_HPP */
